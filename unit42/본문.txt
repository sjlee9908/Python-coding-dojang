데코레이터

데코레이터
@로 시작하는 것
함수를 수정하지 않은 상태에서 추가기능을 구현할 때 사용



데코레이터 사용하기
def 데코레이터(func):
	def wrapper():
		코드
		func()
		코드
@데코레이터
def 함수이름:
	코드
호출할 함수 이름 위에 @데코레이터
데코레이터가 함수를 감싸는 형태로 구성
데코레이터는 한 함수에 여러개 지정 가능, 실행 순서는 위에서 아래


매개변수, 반환값을 사용하는 데코레이터
데코레이터 안쪽의 wrapper함수의 매개변수를 넣어줌
함수의 매개변수를 사용하는 데코레이터


가변인수를 사용하는 데코레이터
데코레이터 안쪽의 wrapper함수의 가변인수를 넣어줌


매개변수가 있는 데코레이터
def 데코레이터(매개변수):
	def deco(func)
		def wrapper():
			코드
			func()
			코드
@데코레이터
def 함수이름:
	코드


클래스로 데코레이터 만들기
class 데코레이터:
	def __init__(self, func):
		self.func=func

	def __call__(self):
		코드
		self.func()
		코드


클래스로 매개변수, 반환값을 처리하는 데코레이터 만들기
class 데코레이터:
	def __init__(self, func):
		self.func=func
	def __call__(self, 매개변수):
		코드


클래스로 매개변수가 있는 데코레이터 만들기
class 데코레이터:
	def __init__(self, func):
		self.func=func
	def __call__(self, func)
		def wrapper(매개변수):
			코드



















